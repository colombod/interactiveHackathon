#!markdown

# Program

## Step

Install and load nuget packages and add usings:

#!csharp

#i "/home/pi/Desktop/interactiveHackathon/src/BarcodeScanner.nuget/bin/Debug/"
#r "nuget:Hackathon2020.BarcodeScanner"
#r "nuget:piTop"
#r "nuget:piTop.FoundationKit"

using System.IO;
using BarcodeScanner;
using BarcodeScanner.Spoonacular;
using Newtonsoft.Json;
using PiTop;
using PiTopMakerArchitecture.Foundation;
using PiTopMakerArchitecture.Foundation.Components;
using PiTopMakerArchitecture.Foundation.Sensors;

#!markdown

## Setup Spoonacular

You'll need a [Spoonacular](https://spoonacular.com/) API key. Store it in a file called `spoonacular.txt` in the same directory as this notebook.

#!csharp

// load API key
var spoonacularApiKey = System.IO.File.ReadAllText("/home/pi/spoonacular.txt").Trim();
// create new client
var spoonClient = new SpoonacularClient(spoonacularApiKey);

#!markdown

## Setup pi-top devices

You should have the following connections:
* Green LED in `D0`
* Amber LED in `D1`
* Red LED in `D2`

#!csharp

var module = new PiTopModule();
var plate = module.GetOrCreatePlate<FoundationPlate>();

var greenLed = plate.GetOrCreateDevice<Led>(DigitalPort.D0);
greenLed.DisplayProperties.Add(new NamedCssColor("green"));

var amberLed = plate.GetOrCreateDevice<Led>(DigitalPort.D1);
amberLed.DisplayProperties.Add(new NamedCssColor("gold"));

var redLed = plate.GetOrCreateDevice<Led>(DigitalPort.D2);
redLed.DisplayProperties.Add(new NamedCssColor("red"));

#!markdown

Let's define a method that will run when the device is running something. Here we simply blink the LED.

#!csharp

void OnThinking()
{
    Task.Run(async () =>
    {
        for (int i = 0; i < 5; ++i)
        {
            redLed.On();
            await Task.Delay(500);
            redLed.Off();
            await Task.Delay(500);
        }
    });
}

#!markdown

Now, we build our wizard, which will show prompts on the pi-top's built-in screen.

Since we want to get the expiration date from the user, we show the date and allow them to use the up/down buttons to increment.

Once the user hits confirm, that value is saved to the json file.

#!csharp

var dateTime = DateTime.UtcNow.Date;

string NewPrompt() => $"Expire date?\n{dateTime.ToShortDateString()}";
module.Display.Clear();
var wizard = new Wizard<FileInfo>(module, new []
{
    Wizard<FileInfo>.CreateStep(
        initialPrompt: $"Expire date?\n{dateTime.ToShortDateString()}",
        confirm: (FileInfo info) => {
            var foodData = JsonConvert.DeserializeObject<FoodData>(File.ReadAllText(info.FullName));
            foodData.ExpirationDate = dateTime;
            File.WriteAllText(info.FullName, JsonConvert.SerializeObject(foodData));
        },
        up: () => {
            dateTime = dateTime.AddDays(1);
            return NewPrompt();
        },
        down: () => {
            dateTime = dateTime.AddDays(-1);
            return NewPrompt();
        }
    )
});

#!markdown

To see what's on the screen, simply run:

#!csharp

module.Display

#!markdown

This is a simple helper function that is used to write the data we get back from Spoonacular and the creation date.

#!csharp

FileInfo WriteFoodDataFile(string imageFile, ClassifyResponse classifyResponse)
{
    string directory = Path.GetDirectoryName(imageFile);
    Directory.CreateDirectory(directory);

    var jsonFilePath =
        Path.Combine(directory, $"{Path.GetFileNameWithoutExtension(imageFile)}.json");
    var foodData = new FoodData
    {
        Classification = new Classification
        {
            Succeeded = classifyResponse.Status == "success",
            Category = classifyResponse.Category,
            Probability = classifyResponse.Probability
        },
        CreationDate = DateTime.UtcNow,
        ExpirationDate = null
    };

    File.WriteAllText(jsonFilePath, JsonConvert.SerializeObject(foodData));
    return new FileInfo(jsonFilePath);
}

#!markdown

Our file system watcher. The sequence goes like this:

1. A user takes a picture and puts that picture in the data folder
2. The picture is classified and the data from that is stored in a JSON file along with when the file was created
3. The JSON file creation triggers the start of the Wizard which prompts for the expiration

#!csharp

async void OnChangedAsync(object source, FileSystemEventArgs e)
{
    OnThinking();


    if (!File.Exists(e.FullPath))
    {
        return;
    }

    switch (Path.GetExtension(e.FullPath))
    {
        case ".bmp":
        case ".gif":
        case ".jpg":
        case ".jpeg":
        case ".png":
        case ".tiff":
            var classifyResult = await spoonClient.Classify(e.FullPath);
            var jsonFileInfo = WriteFoodDataFile(e.FullPath, classifyResult);
            wizard.Reset();
            break;
        case ".json":
            if (wizard.CurrentState == WizardState.NotStarted)
            {
                wizard.Start(new FileInfo(e.FullPath));
            }
            break;
    }
}

var watcher = new FileSystemWatcher();
watcher.Path = @"/home/pi/Desktop/interactiveHackathon/data";
watcher.Changed += OnChangedAsync;
watcher.Created += OnChangedAsync;
watcher.Deleted += OnChangedAsync;
watcher.EnableRaisingEvents = true;
