#!markdown

# Program

## Step

Install and load nuget packages and add usings:

#!csharp

#!connect signalr --kernel-name pi-top --hub-url http://pitop-jon.ngrok.io/kernelHub

#!csharp

#!pi-top
#i "/home/pi/localNuget/"
#r "nuget:Hackathon2020.BarcodeScanner"
#r "nuget:piTop"
#r "nuget:piTop.FoundationKit"
#r "nuget:Microsoft.Azure.CognitiveServices.Vision.ComputerVision"

using System.IO;
using BarcodeScanner;
using BarcodeScanner.Spoonacular;
using BarcodeScanner.CognitiveComputerVision;
using Newtonsoft.Json;
using PiTop;
using PiTopMakerArchitecture.Foundation;
using PiTopMakerArchitecture.Foundation.Components;
using PiTopMakerArchitecture.Foundation.Sensors;
using Microsoft.Azure.CognitiveServices.Vision.ComputerVision;
using Microsoft.Azure.CognitiveServices.Vision.ComputerVision.Models;

#!markdown

## Setup Cognitive Services
Prerequisites
An Azure subscription - Create one for free
The latest version of the .NET Core SDK.
Once you have your Azure subscription, create a Computer Vision resource  in the Azure portal to get your key and endpoint. After it deploys, click Go to resource.
You will need the key and endpoint from the resource you create to connect your application to the Computer Vision service. You'll paste your key and endpoint into the code below later in the quickstart.
You can use the free pricing tier (F0) to try the service, and upgrade later to a paid tier for production.
Create environment variables for the key and endpoint URL, named COMPUTER_VISION_SUBSCRIPTION_KEY and COMPUTER_VISION_ENDPOINT, respectively.
You'll need a [Cognitive](https://docs.microsoft.com/en-us/azure/cognitive-services/computer-vision/quickstarts-sdk/client-library?pivots=programming-language-csharp) API key. Store it in a file called `cognitive.txt` in the same directory as this notebook.

#!csharp

#!pi-top
// load API key
var cognitiveApiKey = System.IO.File.ReadAllText("/home/pi/cognitive.txt").Trim();
var cognitiveEndpoint = "https://hackathoncognitive.cognitiveservices.azure.com/";
// create new client
var computerVisionFoodClient = new ComputerVisionFoodClient(cognitiveApiKey,cognitiveEndpoint);

#!markdown

## Setup pi-top devices

You should have the following connections:
* Green LED in `D0`
* Amber LED in `D1`
* Red LED in `D2`

#!csharp

#!pi-top
var module = new PiTopModule();
var plate = module.GetOrCreatePlate<FoundationPlate>();

var greenLed = plate.GetOrCreateDevice<Led>(DigitalPort.D0);
greenLed.DisplayProperties.Add(new NamedCssColor("green"));

var amberLed = plate.GetOrCreateDevice<Led>(DigitalPort.D1);
amberLed.DisplayProperties.Add(new NamedCssColor("gold"));

var redLed = plate.GetOrCreateDevice<Led>(DigitalPort.D2);
redLed.DisplayProperties.Add(new NamedCssColor("red"));

#!markdown

Let's define a method that will run when the device is running something. Here we simply blink the LED.

#!csharp

#!pi-top
void OnThinking()
{
    Task.Run(async () =>
    {
        for (int i = 0; i < 5; ++i)
        {
            redLed.On();
            await Task.Delay(500);
            redLed.Off();
            await Task.Delay(500);
        }
    });
}

#!markdown

Now, we build our wizard, which will show prompts on the pi-top's built-in screen.

Since we want to get the expiration date from the user, we show the date and allow them to use the up/down buttons to increment.

Once the user hits confirm, that value is saved to the json file.

#!csharp

#!pi-top
var dateTime = DateTime.UtcNow.Date;

string NewPrompt() => dateTime.ToShortDateString(); //$"When does this expire?\n{dateTime.ToShortDateString()}";
module.Display.Clear();
var wizard = new Wizard<FileInfo>(module, new []
{
    Wizard<FileInfo>.CreateStep(
        initialPrompt: dateTime.ToShortDateString(), //$"When does this expire?\n{dateTime.ToShortDateString()}",
        confirm: (FileInfo info) => {
            var foodData = JsonConvert.DeserializeObject<FoodData>(File.ReadAllText(info.FullName));
            foodData.ExpirationDate = dateTime;
            File.WriteAllText(info.FullName, JsonConvert.SerializeObject(foodData));
        },
        up: () => {
            dateTime = dateTime.AddDays(1);
            return NewPrompt();
        },
        down: () => {
            dateTime = dateTime.AddDays(-1);
            return NewPrompt();
        }
    )
});

#!markdown

To see what's on the screen, simply run:

#!csharp

#!pi-top
module.Display

#!markdown

This is a simple helper function that is used to write the data we get back from Spoonacular and the creation date.

#!csharp

#!pi-top
FileInfo WriteFoodDataFile(string imageFile, ImageAnalysis classifyResponse)
{
    string directory = Path.GetDirectoryName(imageFile);
    Directory.CreateDirectory(directory);

    var jsonFilePath =
        Path.Combine(directory, $"{Path.GetFileNameWithoutExtension(imageFile)}.json");
    var foodResult = classifyResponse.Tags.Where(t => t.Hint == "food").FirstOrDefault() ?? classifyResponse.Tags.FirstOrDefault();
    var foodData = new FoodData
    {
        Classification = new Classification
        {
            Succeeded = true,
            Category = foodResult.Name,
            Probability = foodResult.Confidence
        },
        CreationDate = DateTime.UtcNow,
        ExpirationDate = null
    };


    File.WriteAllText(jsonFilePath, JsonConvert.SerializeObject(foodData));
    return new FileInfo(jsonFilePath);
}

#!markdown

Our file system watcher. The sequence goes like this:

1. A user takes a picture and puts that picture in the data folder
2. The picture is classified and the data from that is stored in a JSON file along with when the file was created
3. The JSON file creation triggers the start of the Wizard which prompts for the expiration

#!csharp

#!pi-top
async void OnChangedAsync(object source, FileSystemEventArgs e)
{
    OnThinking();


    if (!File.Exists(e.FullPath))
    {
        return;
    }

    switch (Path.GetExtension(e.FullPath))
    {
        case ".bmp":
        case ".gif":
        case ".jpg":
        case ".jpeg":
        case ".png":
        case ".tiff":
            var classifyResult = await computerVisionFoodClient.Classify(e.FullPath);
            var jsonFileInfo = WriteFoodDataFile(e.FullPath, classifyResult);
            break;
        case ".json":
            if (wizard.CurrentState == WizardState.NotStarted)
            {
                wizard.Start(new FileInfo(e.FullPath));
            }
            break;
    }
}

var watcher = new FileSystemWatcher();
watcher.Path = @"/home/pi/dev/interactivehackathon/data";
watcher.Changed += OnChangedAsync;
watcher.Created += OnChangedAsync;
watcher.Deleted += OnChangedAsync;
watcher.EnableRaisingEvents = true;
